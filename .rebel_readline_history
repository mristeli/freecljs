1618386507292:ls
1618386508212:quit
1618386519328:(js/alert "oi")
1618389775291:(range 2 11)
1618389858484:["A" (map str (range 2 11)) "J" "Q" "K"]
1618389877754:(flatten ["A" (map str (range 2 11)) "J" "Q" "K"])
1618389914948:(defn str-face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (get card lookup)\n    ))
1618389919824:(str-face-or-card 0)
1618389929526:(str-face-or-card 1)
1618389962892:(defn str-face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (get card lookup)\n    ))
1618389966965:(defn face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (get card lookup)\n    ))
1618389976414:(face-of-card 4)
1618389982054:(face-of-card 6\n              \n         ))
1618389983701:(face-of-card 6\n              \n         )
1618390001781:(face-of-card 6\n              \n         ))c
1618390005632:(defn face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (get lookup card)\n    ))
1618390010573:(face-of-card 1)
1618390015371:(face-of-card \n \n \n )
1618390023448:(get (range 10) 5)
1618390033174:(get 5 (range 10)\n     )
1618390037093:(doc get)
1618390068806:(doc\n(defn face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (nth lookup (- card 1))\n    ))\n \n \n )get)
1618390072466:(defn face-of-card [card]\n  (let [lookup (flatten ["A" (map str (range 2 11)) "J" "Q" "K"])]\n    (nth lookup (- card 1))\n    ))
1618390076948:(face-of-card 13)
1618390081850:(face-of-card \n 3)
1618414053186:(-> "Moi" count inc)
1618414064739:(-> "Moi" string/split)
1618414081406:(-> "Moi" (clojure.string/split ""))
1618416374789:(-> "Moi" (clojure.string/split ""))(\n                                     \n                                     )
1618416379141:(def foo 100)
1618416381613:(var foo)
1618416387085:((var foo))
1618416394171:(val (var foo))
1618416401891:(deref (var foo))
1618416443306:(meta (var foo))
1618416829379:(def f (fn [x] (print x) (inc x)))
1618416837251:(def y (fn [x] (print x) (dec x)))
1618416844105:(f 9)
1618416851769:(y 9)
1618416919048:(defn test [x y] x)
1618416933456:(defn testi [x y] x)
1618416941842:(testi (f 8) (y 8))
1618416958728:(testi [f 8] [y 8])
1618416993162:(defn testi [x y] (apply (first x) (rest x)))
1618416994985:(testi [f 8] [y 8])
1618417028453:(defn testi [x y] (first x (first (rest x))))
1618417039013:(defn testi [x y] ((first x) (first (rest x))))
1618417040683:(testi [f 8] [y 8])
1618471016759:(testi [f 8] [y 8])ls
1618471018962:quit
1618471026986:l
1618471028161:quit
1618471030301:(quit)
1618474942224:ls
1618478046814:@app-state
1618478051366:@game-state
1618478068333:exit
1618478072595:(testi [f 8] [y 8])ls
1618478074105:(testi [f 8] [y 8])
1618478076157:exit
1618478077341:quit
1618478078776:(quit)
1618478081817:(exit)
1618478149204:@game-state
1618478153732:game-state
1618478157075:@game-state
1618478193435:@move-state
1618478217557:(fig-status)
1618478237482:@game-state
1618478239866:(fig-status)
1618478268825:@game-state
1618478278883:(var game-state)
1618478286433:quit
1618478358024::repl/help
1618478378297:(var app-state)
1618478387159:(var game--state)
1618478393607:(var game-state)
1618478401958:@game-state
1618478478550:(in-ns 'freecljs.core)
1618478483428:@game-state
1618478915141:(swap! @game-state assoc-in [:decks 0] (rest (get @game-state (:decks 0))))
1618478989941:(get @game-state [:decks 0])
1618478996850:(get @game-state [:decks])
1618479003297:(get @game-state :decks)
1618479018877:(get-in @game-state [:decks 0])
1618479032646:(def new-value (get-in @game-state [:decks 0]))
1618479043849:(swap! @game-state assoc-in [:decks 0] new-value)
1618479060032:(swap! game-state assoc-in [:decks 0] new-value)
1618479074591:new-value
1618479087182:(swap! game-state assoc-in [:decks 0] (rest new-value))
1618479326330:@game-state
1618479340199:(def new-value (rest (get-in @game-state [:decks 0])))
1618479343513:new-value
1618479358667:(swap! game-state assoc-in [:decks 0] (rest new-value))
1618479396665:(swap! game-state assoc-in [:decks 0] rest)
1618479410769:(swap! game-state assoc-in [:decks 0] new-value)
1618553014353:@game-state
1618553532778:(ns 'freecljs.game)
1618553538559:(ns 'freecljs.core)
1618553546271:(use-ns 'freecljs.core)
1618553564896:(use 'freecljs.core)
1618553588560:(in-ns 'freecljs.core)
1618553592509:@game-state
1618553643068:(reset-game!)
1618553644620:@game-state
1618553647181:(reset-game!)
1618553666940:@game-state
1618553668252:(reset-game!)
1618553669892:@game-state
1618553671308:(reset-game!)
1618553673699:@game-state
1618555908221:(str :moi)
1618555976872:(quot 51 13)
1618555998120:(mod 51 13)
1618556002727:(mod 52 13)
1618556077522:(quot 51 13)
1618556082130:(quot 7 13)
1618556085659:(quot 12 13)
1618556088530:(quot 13 13)
1618556102801:(quot 40 13)
1618556191715:(suit-of-card 40)
1618556207350:(in-ns 'freecljs.core)
1618556209403:(suit-of-card 40)
1618556286519:(in-ns 'freecljs.core)
1618556287543:(suit-of-card 40)
1618556300648:(fig-stats)
1618556305294::repl/help
1618556330032:(in-ns 'freecljs.core)
1618556333270:(suit-of-card 40)
1618556344734:(suit-of-card 52)
1618556349798:(suit-of-card 51)
1618556352374:(suit-of-card 30)
1618556357246:(suit-of-card 13)
1618556360022:(suit-of-card 11)
1618556575207:(init-decks)
1618556586810:(in-ns 'freecljs.game)
1618556592685:(init)
1618559296921:(reset-game!)
1618559317842:(in-ns 'freecljs.core)
1618559318777:(reset-game!)
1618559639812:ls
1618559640789:exit
1618559642749:(quit)
1618559695616:(map-indexed)
1618561096318:(reset-game!)
1618561112269:(map-indexed)
1618561114805:(reset-game!)
1618561181048:(game/init)
1618561228211:(game/move @game-state :from :freecells 0 :to :freecells 3)
1618561508596:(partial game/move @game-state)
1618561552573:(game/move @game-state :from [:freecells 0] [:to :freecells 3])
1618561570988:(game/move\n )
1618561602647:(game/move @game-state :from [:freecells 0] :to [:freecells 3])\n )
1618561607315:(game/move @game-state :from [:freecells 0] :to [:freecells 3])
1618561721534:(get-in @game-state [:decks 0])
1618561853072:(assoc-in @game-state [:decks 0] rest)
1618561864968:(reset-game!)
1618561975828:(swap! game-state game/move :from [:freecells 0] :to [:freecells 3])
1618561997861:(game/move @game-state  :from [:freecells 0] :to [:freecells 3])
1618562067058:(game/move @game-state  :from [:decks 0] :to [:decks 3])
1618562092320:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618562196606:(game/move @game-state  :from [:decks 0] :to [:decks 3])
1618562208205:(game/move @game-state :from [:decks 0] :to [:decks 3])
1618562230277:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618562363518:(reset-game!)
1618562392759:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618563225285:(if '() :true :false)
1618565384140:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618565424971:(swap! game-state game/move :from [:decks 7] :to [:decks 2])
1618565931180:(:deck @game-state)
1618565937785:(:decks @game-state)
1618566317137:(reset-game!)
1618567263321:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618568724395:[\n \n )\n A
1618568728204:(swap! game-state game/move :from [:decks 0] :to [:decks 3])
1618568756900:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618569077502:[\n \n )\n A
1618569083296:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618569694294:[\n \n )\n A
1618569739238:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618569748974:(reset-game!)
1618569751078:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618569932003:(seq '())
1618569939376:(seq '(4))
1618569949425:(reset-game!)
1618569951176:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618569990123:(reset-game!)
1618569991910:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618570001075:(reset-game!)
1618570052074:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618570070961:(swap! game-state game/move :from [:decks 0] :to [:decks 4])
1618570072278:(swap! game-state game/move :from [:decks 4] :to [:decks 0])
1618570074378:(swap! game-state game/move :from [:decks 0] :to [:decks 4])
1618572963975:(reset-game!)
1618760749277:(= true '())
1618760757315:(= true 1)
1618760764738::truthy
1618760769052:(:truthy 1)
1618760773971:(:truthy '())
1618761670553:(nthre\n \n\n \n =\n)
1618761676688:(in-ns 'freecell-game)
1618761889419:(nthrest '(1 2 3) 3)
1618761897638:(nthrest '(1 2 3) 2)
1618761917893:(nthrest '(1 2 3) 1)
1618761924765:(nthrest '(1 2 3) 0)
1618763666039:(take 5 '())
1618763669406:(take 5 '(1 2))
1618764113266:(map-indexed vector (repeat 5 5))
1618765856126:(count '() '(1 23 ))
1618766513931:@game-sate
1618766516651:@game-state
1618766521227:game-state
1618766523699:@game-state
1618766530879:(in-ns 'freecell.core)
1618766531803:@game-state
1618766593225:game-state
1618766596329:@gamestate
1618766707546:@game-state
1618766716097:game-state
1618766721387:(deref game-state)
1618766746713:(in-ns 'freecell.core)
1618766748505:game-state
1618766752368:@game-state
1618775583284:(take 5 '[1 2 3 4 5 6 7])
1618775607412:@game-state
1618775613396:(@game-state)
1618775616276:@game-state
1618775618204:game-state
1618775624758:(show-connections)
1618775681965:(take 5 (vec (repeat 6 'm)))
1618775690156:(take 5 (vec (repeat 4 'm)))
